generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  isVerified    Boolean   @default(false)
  verificationToken String? @unique
  verificationTokenExpiry DateTime?
  resetToken    String?   @unique
  resetTokenExpiry DateTime?
  accounts      Account[]
  sessions      Session[]
  portfolios    Portfolio[]
  subscription  Subscription?
  priceAlerts   PriceAlert[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Portfolio {
  id        String    @id @default(cuid())
  name      String
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  assets    Asset[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Asset {
  id          String    @id @default(cuid())
  symbol      String
  assetType  String   // 'STOCK' or 'CRYPTO'
  quantity    Float
  buyPrice    Float
  portfolioId String
  portfolio   Portfolio @relation(fields: [portfolioId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Subscription {
  id              String   @id @default(cuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stripeCustomerId String?  @unique
  stripePriceId    String?
  stripeSubscriptionId String? @unique
  status          String   // 'ACTIVE', 'CANCELED', 'PAST_DUE', 'UNPAID', 'TRIAL'
  tier            String   // 'FREE', 'PRO', 'ENTERPRISE'
  currentPeriodEnd DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PriceAlert {
  id          String    @id @default(cuid())
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  symbol      String
  targetPrice Float
  condition   String    // 'ABOVE' or 'BELOW'
  isActive    Boolean   @default(true)
  triggered   Boolean   @default(false)
  lastTriggered DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}
